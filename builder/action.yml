name: "Image Builder"
description: "Builds multiarch images via Docker/Buildx and pushes them into ECR"
author: "Cameron Larsen @cam3ron2"
branding:
  icon: "terminal"
  color: "blue"

inputs:
  registry:
    description: "the ecr registry that images will be pushed to"
    required: false
    default: "667650582711.dkr.ecr.us-west-2.amazonaws.com"
  repository:
    description: "the ecr repo that images will be pushed to"
    required: true
  platforms:
    description: "a comma separated list of cpu architectures that the image will be built for. Example: 'linux/arm64,linux/amd64'"
    required: false
    default: "linux/arm64,linux/amd64"
  dockerfile_path:
    description: "the path to the dockerfile to use for building the image"
    required: false
    default: "./"
  dockerfile_name:
    description: "the name of the dockerfile to use for building the image"
    required: false
    default: "Dockerfile"
  build_args:
    description: "a comma separated list of build args to pass to the buildx build command"
    required: false

outputs:
  version:
    description: "the version of the image that was built"
    value: "${{ steps.version.outputs.version }}"

runs:
  using: "composite"
  steps:
    - name: Expose GitHub Runtime
      uses: crazy-max/ghaction-github-runtime@v1
    - name: Env
      shell: bash
      run: |
        # ACTIONS_RUNTIME_TOKEN, ACTIONS_RUNTIME_URL should be exposed
        env|sort
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Set Version
      shell: bash
      run: echo "::set-output name=version::$(date +%Y%m%d%H%M%S)"
      id: version
    - name: Login to ECR
      shell: bash
      run: |
        region=$(echo ${{ inputs.registry }} | cut -d'.' -f4)
        aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${{ inputs.registry }}
    - name: Building + Pushing Docker Image
      shell: bash
      run: |
        ARGS=""
        if [ ! -z "${{ inputs.build_args }}" ]; then
          for i in $(echo ${{ inputs.build_args }} | tr "," "\n"); do
            ARGS="${ARGS} --build-arg ${i}"
          done
        fi
        export REPOSITORY=${{ inputs.registry }}/${{ inputs.repository }}
        export TAG="$(git rev-parse --short HEAD)"
        echo "Building ${{ inputs.dockerfile_path }}${{ inputs.dockerfile_name }}"
        docker buildx build ${{ inputs.dockerfile_path }} -f ${{ inputs.dockerfile_path }}${{ inputs.dockerfile_name }} \
          --platform ${{ inputs.platforms }} ${ARGS} \
          --cache-from=type=gha \
          --cache-to=type=gha,mode=max \
          --tag ${REPOSITORY}:${TAG} \
          --tag ${REPOSITORY}:${{ steps.version.outputs.version }} \
          --tag ${REPOSITORY}:latest \
          --push
